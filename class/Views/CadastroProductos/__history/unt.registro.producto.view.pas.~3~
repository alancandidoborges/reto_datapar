unit unt.registro.producto.view;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, unt.formplantilharegistro.view,
  Vcl.Buttons, Vcl.StdCtrls, Vcl.ExtCtrls, unt.producto, unt.producto.service;

type
  TfrmRegistroProducto = class(TfrmPlantilhaRegistro)
    Label1: TLabel;
    EdtNombre: TEdit;
    Label2: TLabel;
    MemDescripcion: TMemo;
    Label3: TLabel;
    EdtPrecio: TEdit;
    EdtQuantidad: TEdit;
    Label4: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    FProducto       : TProducto;
    FProductoService: TProductoService;
  public
    function Grabar     : Integer; override;
    function Consiste   : Boolean; override;
    function CargarDatos: Boolean; override;

    procedure CargarObjeto; override;
  end;

var
  frmRegistroProducto: TfrmRegistroProducto;

implementation

{$R *.dfm}

uses unt.TipoOperacion.Enum;


function TfrmRegistroProducto.CargarDatos: Boolean;
begin
  FProducto := FProductoService.Load(Codigo);

  if TipoOperacion = toAlterar then
  begin
    if not Assigned(FProducto) then
    begin
      EdtNombre.Text      := FProducto.Nombre;
      MemDescripcion.Text := FProducto.Descripcion;
      EdtPrecio.Text      := FormatFloat('###,0.00', FProducto.Precio);
      EdtQuantidad.Text   :=  FloatToStr(FProducto.Cantidad);
    end;
  end
  else
  begin
    EdtPrecio.Text    := '0,00';
    EdtQuantidad.Text := '0';
  end;
end;

procedure TfrmRegistroProducto.CargarObjeto;
begin
  inherited;
  FProducto.ID          := Codigo;
  FProducto.Nombre      := EdtNombre.Text;
  FProducto.Descripcion := MemDescripcion.Text;
  FProducto.Precio      := StrToFloatDef(EdtPrecio.Text, 0);
  FProducto.Cantidad    := StrToFloat(EdtQuantidad.Text, 0);
end;

function TfrmRegistroProducto.Consiste: Boolean;
var
  mensagem: String;
begin
  Result := True;
  if trim(edtNombre.Text) = EmptyStr then
  begin
    mensagem := 'El campo [Nombre] no debe estar vacío.';
    Application.MessageBox(PChar(mensagem), 'Información', MB_OK + MB_ICONWARNING);
    edtNombre.SetFocus;
    Result := False;
  end;

  if trim(MemDescripcion.Text) = EmptyStr then
  begin
    mensagem := 'El campo [Descripcion] no debe estar vacío.';
    Application.MessageBox(PChar(mensagem), 'Información', MB_OK + MB_ICONWARNING);
    MemDescripcion.SetFocus;
    Result := False;
  end;

  if StrToFloatDef(EdtPrecio.Text, 0) = 0 then
  begin
    mensagem := 'El campo [Precio] no debe estar vacío.';
    Application.MessageBox(PChar(mensagem), 'Información', MB_OK + MB_ICONWARNING);
    EdtPrecio.SetFocus;
    Result := False;
  end;

  if StrToFloatDef(EdtQuantidad.Text, 0) = 0 then
  begin
    mensagem := 'El campo [Precio] no debe estar vacío.';
    Application.MessageBox(PChar(mensagem), 'Información', MB_OK + MB_ICONWARNING);
    EdtQuantidad.SetFocus;
    Result := False;
  end;
end;

procedure TfrmRegistroProducto.FormCreate(Sender: TObject);
begin
  inherited;
  FProducto         := TProducto.Create;
  FProductoService  := TProductoService.Create;
end;

procedure TfrmRegistroProducto.FormDestroy(Sender: TObject);
begin
  inherited;
  FProductoService.DisposeOf;
end;

function TfrmRegistroProducto.Grabar: Integer;
begin

end;

end.
